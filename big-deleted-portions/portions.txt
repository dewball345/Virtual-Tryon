Moving Left Earrings - Not object oriented

async function moveLeftEarring(){
    var cube = scene.getObjectByName( "left" );
    var mesh = scene.getObjectByName("mask");
    
    const domToWorld = function(x, y) {
      let newPosition = new THREE.Vector3();
      let normalizedX = (x / canvas.width) * 2 - 1;
      let normalizedY = ((y - canvas.height) / canvas.height) * 2 + 1;
      newPosition.set(normalizedX, -normalizedY, 0);
      
      newPosition.unproject(camera);
      
      //let dir = newPosition.sub(camera.position).normalize();
      //console.log(dir);
      //let distance = -camera.position.z + dir.z;
      //let pos = camera.position.clone().add(dir.multiplyScalar(distance));
      return newPosition;
    };
//    
    var poses = await returnPoseLandmarks();
    
    if(poses.keypoints[4].score <= 0.3){
        hide("left");
        return;
    }
    var domPos = domToWorld(
        poses.keypoints[4].position.x, 
        poses.keypoints[4].position.y
    );
    //console.log(domPos)
    cube.position.x = domPos.x + controls.xOff;
    cube.position.y = domPos.y + controls.yOff;
    const trackLeftRot = mesh.geometry.track(109 , 108 , 151 );
    const trackLeftPos = mesh.geometry.track(177 , 137 , 132 );
    //cube.position.copy(trackLeftPos.position);
    cube.rotation.setFromRotationMatrix(trackLeftRot.rotation);
    //cube.rotation.z = 0
    //console.log(cube.rotation);
    
    //cube.rotation.x *= -1;
    //cube.rotation.y *= -1;
    //cube.rotation.z *= -1;
    var temp = cube.rotation.z
    cube.rotation.x += -90 / 180 * Math.PI;
    cube.rotation.z = -cube.rotation.y;
    cube.rotation.y = temp;
    //cube.rotation.x *= -1;
    
    cube.position.z = trackLeftPos.position.z + controls.zOff;
    //cube.position.x += 10;
    //cube.position.y += -30;
    //console.log(cube.position.z);
}


Creating Left Earrings - not object oriented

function createLeftEarring() {
    const objLoader = new OBJLoader2();
    objLoader.load('../obj/untitled.obj', (root) => {
        var material = new THREE.MeshStandardMaterial({
              color: 0xff2010,
              roughness: 0.4,
              metalness: 0.1,
              transparent: true,
        });
        console.log(root);
        
        root.children[0].material = material;
        root.scale.setScalar(10);
        root.name = "left";

        root.castShadow = true; 
        root.receiveShadow = true;

        scene.add( root ); 
        root.rotation.x = -90;
        scene.add(root);
    });
}

Update Right Earring Function replaced with object oriented version:
async function moveRightEarring(){
    
    
    const domToWorld = function(x, y) {
      let newPosition = new THREE.Vector3();
      let normalizedX = (x / canvas.width) * 2 - 1;
      let normalizedY = ((y - canvas.height) / canvas.height) * 2 + 1;
      newPosition.set(normalizedX, -normalizedY, 0);
      
      newPosition.unproject(camera);
      
      //let dir = newPosition.sub(camera.position).normalize();
      //console.log(dir);
      //let distance = -camera.position.z + dir.z;
      //let pos = camera.position.clone().add(dir.multiplyScalar(distance));
      return newPosition;
    };
    
    var poses = await returnPoseLandmarks();
    
    if(poses.keypoints[3].score <= 0.3){
        hide("right");
        return;
    }
    
    var domPos = domToWorld(
        poses.keypoints[3].position.x, 
        poses.keypoints[3].position.y
    );
    var cube = scene.getObjectByName( "right" );
    var mesh = scene.getObjectByName("mask");
    
    cube.position.x = domPos.x + controls.xOff2;
    cube.position.y = domPos.y + controls.yOff2;
    
    
    const trackLeftRot = mesh.geometry.track(109 , 108 , 151 );
    const trackLeftPos = mesh.geometry.track(177 , 137 , 132 );
    
    cube.rotation.setFromRotationMatrix(trackLeftRot.rotation);
    
    var temp = cube.rotation.z
    cube.rotation.x += -90 / 180 * Math.PI;
    cube.rotation.z = -cube.rotation.y;
    cube.rotation.y = temp;
    //cube.rotation.x *= -1;
    
    cube.position.z = trackLeftPos.position.z + controls.zOff2;
    

    //console.log(cube.position)
}

Removed function in index.js for creating Right Earring - replace w/h object oriented version:

function createRightEarring(){
    const objLoader = new OBJLoader2();
    objLoader.load('../obj/untitled.obj', (root) => {
        var material = new THREE.MeshStandardMaterial({
              color: 0xff2010,
              roughness: 0.4,
              metalness: 0.1,
              transparent: true,
        });
        console.log(root);
        
        root.children[0].material = material;
        root.scale.setScalar(10);
        root.name = "right";

        root.castShadow = true; 
        root.receiveShadow = true;

        scene.add( root ); 
        root.rotation.x = -90;
        scene.add(root);
    });
}

Move Necklace Function Original - Replaced with OOp version
function moveNecklace(){
    const domToWorld = function(x, y) {
      let newPosition = new THREE.Vector3();
      let normalizedX = (x / canvas.width) * 2 - 1;
      let normalizedY = ((y - canvas.height) / canvas.height) * 2 + 1;
      newPosition.set(normalizedX, -normalizedY, 0);
      
      newPosition.unproject(camera);
      
      //let dir = newPosition.sub(camera.position).normalize();
      //console.log(dir);
      //let distance = -camera.position.z + dir.z;
      //let pos = camera.position.clone().add(dir.multiplyScalar(distance));
      return newPosition;
    };
    
    var cube = scene.getObjectByName("necklace");
    var mesh = scene.getObjectByName("mask");
    
    //var landmarks = returnPoseLandmarks();
    
    const trackNecklace = mesh.geometry.track(118 , 50 , 101);
    cube.position.copy(trackNecklace.position);
    cube.rotation.setFromRotationMatrix(trackNecklace.rotation);
    
    cube.rotation.x *= -1;
    cube.rotation.y *= -1;
    cube.rotation.z *= -1;
    
    //cube.position.z = -100;
    cube.position.x += 12;
    cube.position.y += -40;
}

Create Necklace Original Function - Switched to OOP

function createNecklace(){
    const objLoader = new OBJLoader2();
    objLoader.load('../obj/necklace.obj', (root) => {
        var material = new THREE.MeshStandardMaterial({
              color: 0xff2010,
              roughness: 0.4,
              metalness: 0.1,
              transparent: true,
        });
        console.log(root);
        
        root.children[0].material = material;
        root.scale.setScalar(10);
        root.name = "necklace";

        root.castShadow = true; 
        root.receiveShadow = true;

        scene.add( root ); 
        scene.add(root);
    });
    
//    var geometry = new THREE.BoxGeometry();
//    
//    var material = new THREE.MeshStandardMaterial({
//      color: 0x00ffff,
//      roughness: 0.4,
//      metalness: 0.1,
//      transparent: true,
//    });
//    
//    var cube = new THREE.Mesh(geometry, material);
//    cube.scale.x=10;
//    cube.scale.y = 60;
//    cube.scale.z = 10;
//    cube.name = "necklace";
//    
//    cube.castShadow = true; 
//    cube.receiveShadow = true;
//    
//    scene.add(cube);
}

Removed Original NoseRing Update Function - Made OOP
function moveNoseRing(){
    var cube = scene.getObjectByName("nosering");
    var mesh = scene.getObjectByName("mask");
    
    const trackNoseRing = mesh.geometry.track(235, 64, 240);
    cube.position.copy(trackNoseRing.position);
    cube.rotation.setFromRotationMatrix(trackNoseRing.rotation);
    
    cube.rotation.x *= -1;
    cube.rotation.y *= -1;
    cube.rotation.z *= -1;
    
    //cube.position.z = -100;
    //cube.position.x += 12;
    //cube.position.y += -40; 
}

Removed Original NoseRing Create Function - Made OOP
function createNoseRing(){
    var geometry = new THREE.SphereGeometry();
    var material = new THREE.MeshStandardMaterial({
      color: 0xaaaa00,
      roughness: 0.4,
      metalness: 0.1,
      transparent: true,
    });
    
    var sphere = new THREE.Mesh(geometry, material);
    sphere.scale.setScalar(5);
    sphere.name = "nosering";
    
    sphere.castShadow = true; 
    sphere.receiveShadow = true;
    
    scene.add(sphere);
}

Removed Original Bottu Update Function - Made it OOP
function moveBottu(){
    var cube = scene.getObjectByName("bottu");
    var mesh = scene.getObjectByName("mask");
    
    const trackBottu = mesh.geometry.track(55, 8, 9);
    cube.position.copy(trackBottu.position);
    cube.rotation.setFromRotationMatrix(trackBottu.rotation);
    
    cube.rotation.x *= -1;
    cube.rotation.y *= -1;
    cube.rotation.z *= -1; 
    
    cube.position.z += 10;
}


Removed Original Bottu Create Function - Made it OOP
function createBottu(){
    var geometry = new THREE.SphereGeometry();
    var material = new THREE.MeshStandardMaterial({
      color: 0x550000,
      roughness: 0.4,
      metalness: 0.1,
      transparent: true,
    });
    
    var sphere = new THREE.Mesh(geometry, material);
    sphere.scale.setScalar(5);
    sphere.name = "bottu";
    
    sphere.castShadow = true; 
    sphere.receiveShadow = true;
    
    scene.add(sphere);
}